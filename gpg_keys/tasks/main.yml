---
- name: Add gnupg package
  apt:
    name:
    - gnupg2
  become: yes

- name: Collect existing keys
  command: "gpg2 --list-secret-keys --with-colons"
  register: gpg_colon_output

- name: Process key data
  set_fact:
    gpg_remote_key_ids: |
      {% set result = [] %}
      {% for line in gpg_colon_output.stdout_lines %}
      {%   set fields = line.split(':') %}
      {%   if fields[0] == 'sec' %}
      {%     set _ = result.append(fields[4]) %}
      {%   endif %}
      {% endfor %}
      {{ result }}

- name: Collect local keys to transfer
  command: "gpg2 --list-secret-keys --with-colons {{ gpg_key_email }}"
  register: gpg_colon_output
  delegate_to: localhost
  changed_when: False
  run_once: True

- name: Process key data
  set_fact:
    gpg_secret_key_attrs: |
      {% set result = [] %}
      {% set algnames = {1: 'RSA'} %}
      {% for line in gpg_colon_output.stdout_lines %}
      {%   set fields = line.split(':') %}
      {%   if fields[0] == 'sec' %}
      {%     set _ = result.append({}) %}
      {%     set keyalg = algnames.get(fields[3], 'Unknown') %}
      {%     set _ = result[-1].__setitem__('keylen', fields[2]) %}
      {%     set _ = result[-1].__setitem__('keyalg', keyalg) %}
      {%     set _ = result[-1].__setitem__('keyid', fields[4]) %}
      {%     set _ = result[-1].__setitem__('date', fields[5]) %}
      {%   elif fields[0] == 'uid' %}
      {%     set _ = result[-1].__setitem__('uid', fields[9]) %}
      {%   endif %}
      {% endfor %}
      {{ result }}
  run_once: True

- name: Transfer each key
  include_tasks: transfer_key.yml
  when: item.keyid not in gpg_remote_key_ids
  loop: "{{ gpg_secret_key_attrs }}"

- name: Export ownertrust values
  command: "gpg2 --export-ownertrust"
  register: gpg_ownertrust
  delegate_to: localhost
  changed_when: False
  run_once: True

- name: Import ownertrust values
  command:
  args:
    cmd: "gpg2 --import-ownertrust"
    stdin: "{{ gpg_ownertrust.stdout }}"
